(()=>{var t,e,n={6635:(t,e,n)=>{"use strict";n.d(e,{Z:()=>c});var r=n(6564),o=n.n(r),i=n(9306),a=n(7318),u=n(9632);function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function c(t){var e,n=(0,a.qp)(u.T),r=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){o()(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},t);return t.href&&(e=t.href,/^[a-zA-Z0-9]+?\:\/\//.test(e))?(r.rel="noopener noreferrer",r.target="_blank"):r.onClick=function(e){if(t.href&&(e.preventDefault(),n.push(t.href)),t.onClick)return t.onClick.call(this,e)},(0,i.h)("a",r)}},1246:(t,e,n)=>{"use strict";var r=n(4122),o=n.n(r),i=n(4340),a=n.n(i),u=n(3819),l=n.n(u),c=n(9306),_=n(6635);function s(t){return(0,c.h)("div",{className:"TextLoading ".concat(t.class||"")},(0,c.h)("div",{className:"TextLoading__Line TextLoading__Line-1"},(0,c.h)("div",{className:"TextLoading__Gradient"})),(0,c.h)("div",{className:"TextLoading__Line TextLoading__Line-2"},(0,c.h)("div",{className:"TextLoading__Gradient"})),(0,c.h)("div",{className:"TextLoading__Line TextLoading__Line-3"},(0,c.h)("div",{className:"TextLoading__Gradient"})))}function f(t){var e=t.activeMenu,n=t.pageComponent,r=t.isLoading,o=n;return(0,c.h)("div",{class:"Page"},(0,c.h)("div",{class:"Page__Header ".concat("about"!==e?"Page__Header--shorter":"")},(0,c.h)("div",{class:"Page__HeaderBanner"}),(0,c.h)("div",{class:"Page__HeaderOverlay"}),(0,c.h)("div",{class:"Page__HeaderInfoContainer"},(0,c.h)("div",{class:"Page__HeaderPhoto"}),(0,c.h)("div",{class:"Page__HeaderName"},"Kirill Shestakov"),(0,c.h)("div",{class:"Page__HeaderDescription"},"Web Developer in Vancouver")),(0,c.h)("nav",{class:"Page__HeaderMenu"},(0,c.h)(_.Z,{class:"Page__MenuLink",href:"/"},(0,c.h)("div",{class:"Page__MenuItem ".concat("about"===e?"Page__MenuItem--active":"")},"About")),(0,c.h)(_.Z,{class:"Page__MenuLink",href:"/blog/"},(0,c.h)("div",{class:"Page__MenuItem ".concat("blog"===e?"Page__MenuItem--active":"")},"Writing")),(0,c.h)(_.Z,{class:"Page__MenuLink",href:"/portfolio/"},(0,c.h)("div",{class:"Page__MenuItem ".concat("portfolio"===e?"Page__MenuItem--active":"")},"Portfolio")))),r&&(0,c.h)("div",{class:"Page__ContentLoadingContainer"},(0,c.h)("div",{class:"Page__ContentLoading"},(0,c.h)(s,null),(0,c.h)(s,null))),(0,c.h)("div",{class:"Page__ContentContainer ".concat(r?"Page__ContentContainer--loading":"")},(0,c.h)(o,{class:"Page__Content"})),(0,c.h)("div",{class:"Page__FooterSpacer"}),(0,c.h)("div",{class:"Page__Footer"},(0,c.h)("div",{class:"Page__FooterContent"},"Â© Copyright 2020 Kirill Shestakov")))}var h=n(7318);const p={"/":function(){return Promise.all([n.e(532),n.e(411)]).then(n.bind(n,9411))},"/blog":function(){return Promise.all([n.e(532),n.e(568)]).then(n.bind(n,2568))},"/blog/accessor-pattern":function(){return Promise.all([n.e(53),n.e(361)]).then(n.bind(n,7361))},"/blog/is-this-real":function(){return Promise.all([n.e(53),n.e(599)]).then(n.bind(n,1599))},"/blog/book-that-tears-its-own-pages":function(){return Promise.all([n.e(53),n.e(951)]).then(n.bind(n,3951))},"/blog/paranoia":function(){return Promise.all([n.e(53),n.e(675)]).then(n.bind(n,9675))},"/portfolio":function(){return Promise.all([n.e(532),n.e(705)]).then(n.bind(n,705))},"/portfolio/securebook":function(){return Promise.all([n.e(532),n.e(387)]).then(n.bind(n,387))},"/portfolio/xmatters":function(){return Promise.all([n.e(532),n.e(322)]).then(n.bind(n,5322))},"/portfolio/collabware":function(){return Promise.all([n.e(532),n.e(488)]).then(n.bind(n,7488))},"/portfolio/netgear":function(){return Promise.all([n.e(532),n.e(198)]).then(n.bind(n,4198))},"/portfolio/capstone":function(){return Promise.all([n.e(532),n.e(736)]).then(n.bind(n,9736))}};var d=n(9632);function v(t){return y.apply(this,arguments)}function y(){return(y=l()(o().mark((function t(e){var n,r;return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:t.t0=o().keys(p);case 1:if((t.t1=t.t0()).done){t.next=10;break}if(n=t.t1.value,e.pathname!==n&&e.pathname!=="".concat(n,"/")&&e.pathname!=="".concat(n,"/index.html")){t.next=8;break}return r=p[n],t.next=7,r();case 7:return t.abrupt("return",t.sent);case 8:t.next=1;break;case 10:return t.next=12,p["/"]();case 12:return t.abrupt("return",t.sent);case 13:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function g(t){var e=t.history,n=t.initPageInfo,r=(0,h.eJ)(!1),i=a()(r,2),u=i[0],_=i[1],s=(0,h.eJ)(n),p=a()(s,2),y=p[0],g=p[1];return(0,h.d4)((function(){return e.listen(l()(o().mark((function t(){return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return _(!0),window.scrollTo({top:0,behavior:"smooth"}),t.t0=g,t.next=5,v(e.location);case 5:t.t1=t.sent,(0,t.t0)(t.t1),_(!1);case 8:case"end":return t.stop()}}),t)}))))})),(0,h.d4)((function(){document.title=y.title})),(0,c.h)(d.T.Provider,{value:e},(0,c.h)(f,{isLoading:u,pageComponent:y.default,activeMenu:y.menu}))}function m(){return(m=l()(o().mark((function t(e){var n,r,i;return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.history,r=e.root,t.next=3,v(n.location);case 3:i=t.sent,(0,c.ZB)((0,c.h)(g,{history:n,initPageInfo:i}),r);case 5:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function b(){return(b=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}var w,k=w||(w={});k.Pop="POP",k.Push="PUSH",k.Replace="REPLACE";function x(t){t.preventDefault(),t.returnValue=""}function P(){var t=[];return{get length(){return t.length},push:function(e){return t.push(e),function(){t=t.filter((function(t){return t!==e}))}},call:function(e){t.forEach((function(t){return t&&t(e)}))}}}!function(t){m.apply(this,arguments)}({history:function(t){function e(){var t=a.location,e=u.state||{};return[e.idx,{pathname:t.pathname,search:t.search,hash:t.hash,state:e.usr||null,key:e.key||"default"}]}function n(t){return"string"==typeof t?t:function(t){var e=t.pathname,n=t.search;return(void 0===e?"/":e)+(void 0===n?"":n)+(void 0===(t=t.hash)?"":t)}(t)}function r(t,e){return void 0===e&&(e=null),b({},s,{},"string"==typeof t?function(t){var e={};if(t){var n=t.indexOf("#");0<=n&&(e.hash=t.substr(n),t=t.substr(0,n)),0<=(n=t.indexOf("?"))&&(e.search=t.substr(n),t=t.substr(0,n)),t&&(e.pathname=t)}return e}(t):t,{state:e,key:Math.random().toString(36).substr(2,8)})}function o(t){c=t,t=e(),_=t[0],s=t[1],f.call({action:c,location:s})}function i(t){u.go(t)}void 0===t&&(t={});var a=void 0===(t=t.window)?document.defaultView:t,u=a.history,l=null;a.addEventListener("popstate",(function(){if(l)h.call(l),l=null;else{var t=w.Pop,n=e(),r=n[0];if(n=n[1],h.length){if(null!=r){var a=_-r;a&&(l={action:t,location:n,retry:function(){i(-1*a)}},i(a))}}else o(t)}}));var c=w.Pop,_=(t=e())[0],s=t[1],f=P(),h=P();return null==_&&(_=0,u.replaceState(b({},u.state,{idx:_}),"")),{get action(){return c},get location(){return s},createHref:n,push:function t(e,i){var l=w.Push,c=r(e,i);if(!h.length||(h.call({action:l,location:c,retry:function(){t(e,i)}}),0)){var s=[{usr:c.state,key:c.key,idx:_+1},n(c)];c=s[0],s=s[1];try{u.pushState(c,"",s)}catch(t){a.location.assign(s)}o(l)}},replace:function t(e,i){var a=w.Replace,l=r(e,i);h.length&&(h.call({action:a,location:l,retry:function(){t(e,i)}}),1)||(l=[{usr:l.state,key:l.key,idx:_},n(l)],u.replaceState(l[0],"",l[1]),o(a))},go:i,back:function(){i(-1)},forward:function(){i(1)},listen:function(t){return f.push(t)},block:function(t){var e=h.push(t);return 1===h.length&&a.addEventListener("beforeunload",x),function(){e(),h.length||a.removeEventListener("beforeunload",x)}}}}(),root:document.getElementById("root")})},9632:(t,e,n)=>{"use strict";n.d(e,{T:()=>r});var r=(0,n(9306).kr)(null)},6850:t=>{t.exports=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}},6391:t=>{t.exports=function(t){if(Array.isArray(t))return t}},3819:t=>{function e(t,e,n,r,o,i,a){try{var u=t[i](a),l=u.value}catch(t){return void n(t)}u.done?e(l):Promise.resolve(l).then(r,o)}t.exports=function(t){return function(){var n=this,r=arguments;return new Promise((function(o,i){var a=t.apply(n,r);function u(t){e(a,o,i,u,l,"next",t)}function l(t){e(a,o,i,u,l,"throw",t)}u(void 0)}))}}},6564:t=>{t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},8937:t=>{t.exports=function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}}},717:t=>{t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},4340:(t,e,n)=>{var r=n(6391),o=n(8937),i=n(1848),a=n(717);t.exports=function(t,e){return r(t)||o(t,e)||i(t,e)||a()}},1848:(t,e,n)=>{var r=n(6850);t.exports=function(t,e){if(t){if("string"==typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(t,e):void 0}}},4122:(t,e,n)=>{t.exports=n(1061)},9306:(t,e,n)=>{"use strict";n.d(e,{sY:()=>D,ZB:()=>F,az:()=>p,h:()=>p,HY:()=>y,Vf:()=>v,wA:()=>g,Tm:()=>I,kr:()=>U,bR:()=>P,k:()=>N,YM:()=>r});var r,o,i,a,u,l,c={},_=[],s=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function f(t,e){for(var n in e)t[n]=e[n];return t}function h(t){var e=t.parentNode;e&&e.removeChild(t)}function p(t,e,n){var r,o,i,a=arguments,u={};for(i in e)"key"==i?r=e[i]:"ref"==i?o=e[i]:u[i]=e[i];if(arguments.length>3)for(n=[n],i=3;i<arguments.length;i++)n.push(a[i]);if(null!=n&&(u.children=n),"function"==typeof t&&null!=t.defaultProps)for(i in t.defaultProps)void 0===u[i]&&(u[i]=t.defaultProps[i]);return d(t,u,r,o,null)}function d(t,e,n,o,i){var a={type:t,props:e,key:n,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:i};return null==i&&(a.__v=a),null!=r.vnode&&r.vnode(a),a}function v(){return{current:null}}function y(t){return t.children}function g(t,e){this.props=t,this.context=e}function m(t,e){if(null==e)return t.__?m(t.__,t.__.__k.indexOf(t)+1):null;for(var n;e<t.__k.length;e++)if(null!=(n=t.__k[e])&&null!=n.__e)return n.__e;return"function"==typeof t.type?m(t):null}function b(t){var e,n;if(null!=(t=t.__)&&null!=t.__c){for(t.__e=t.__c.base=null,e=0;e<t.__k.length;e++)if(null!=(n=t.__k[e])&&null!=n.__e){t.__e=t.__c.base=n.__e;break}return b(t)}}function w(t){(!t.__d&&(t.__d=!0)&&o.push(t)&&!k.__r++||a!==r.debounceRendering)&&((a=r.debounceRendering)||i)(k)}function k(){for(var t;k.__r=o.length;)t=o.sort((function(t,e){return t.__v.__b-e.__v.__b})),o=[],t.some((function(t){var e,n,r,o,i,a,u;t.__d&&(a=(i=(e=t).__v).__e,(u=e.__P)&&(n=[],(r=f({},i)).__v=r,o=T(u,i,r,e.__n,void 0!==u.ownerSVGElement,null!=i.__h?[a]:null,n,null==a?m(i):a,i.__h),j(n,i),o!=a&&b(i)))}))}function x(t,e,n,r,o,i,a,u,l,s){var f,p,v,g,b,w,k,x=r&&r.__k||_,P=x.length;for(l==c&&(l=null!=a?a[0]:P?m(r,0):null),n.__k=[],f=0;f<e.length;f++)if(null!=(g=n.__k[f]=null==(g=e[f])||"boolean"==typeof g?null:"string"==typeof g||"number"==typeof g?d(null,g,null,null,g):Array.isArray(g)?d(y,{children:g},null,null,null):null!=g.__e||null!=g.__c?d(g.type,g.props,g.key,null,g.__v):g)){if(g.__=n,g.__b=n.__b+1,null===(v=x[f])||v&&g.key==v.key&&g.type===v.type)x[f]=void 0;else for(p=0;p<P;p++){if((v=x[p])&&g.key==v.key&&g.type===v.type){x[p]=void 0;break}v=null}b=T(t,g,v=v||c,o,i,a,u,l,s),(p=g.ref)&&v.ref!=p&&(k||(k=[]),v.ref&&k.push(v.ref,null,g),k.push(p,g.__c||b,g)),null!=b?(null==w&&(w=b),l=L(t,g,v,x,a,b,l),s||"option"!=n.type?"function"==typeof n.type&&(n.__d=l):t.value=""):l&&v.__e==l&&l.parentNode!=t&&(l=m(v))}if(n.__e=w,null!=a&&"function"!=typeof n.type)for(f=a.length;f--;)null!=a[f]&&h(a[f]);for(f=P;f--;)null!=x[f]&&N(x[f],x[f]);if(k)for(f=0;f<k.length;f++)A(k[f],k[++f],k[++f])}function P(t,e){return e=e||[],null==t||"boolean"==typeof t||(Array.isArray(t)?t.some((function(t){P(t,e)})):e.push(t)),e}function L(t,e,n,r,o,i,a){var u,l,c;if(void 0!==e.__d)u=e.__d,e.__d=void 0;else if(o==n||i!=a||null==i.parentNode)t:if(null==a||a.parentNode!==t)t.appendChild(i),u=null;else{for(l=a,c=0;(l=l.nextSibling)&&c<r.length;c+=2)if(l==i)break t;t.insertBefore(i,a),u=a}return void 0!==u?u:i.nextSibling}function E(t,e,n){"-"===e[0]?t.setProperty(e,n):t[e]=null==n?"":"number"!=typeof n||s.test(e)?n:n+"px"}function O(t,e,n,r,o){var i,a,u;if(o&&"className"==e&&(e="class"),"style"===e)if("string"==typeof n)t.style.cssText=n;else{if("string"==typeof r&&(t.style.cssText=r=""),r)for(e in r)n&&e in n||E(t.style,e,"");if(n)for(e in n)r&&n[e]===r[e]||E(t.style,e,n[e])}else"o"===e[0]&&"n"===e[1]?(i=e!==(e=e.replace(/Capture$/,"")),(a=e.toLowerCase())in t&&(e=a),e=e.slice(2),t.l||(t.l={}),t.l[e+i]=n,u=i?C:S,n?r||t.addEventListener(e,u,i):t.removeEventListener(e,u,i)):"list"!==e&&"tagName"!==e&&"form"!==e&&"type"!==e&&"size"!==e&&"download"!==e&&"href"!==e&&!o&&e in t?t[e]=null==n?"":n:"function"!=typeof n&&"dangerouslySetInnerHTML"!==e&&(e!==(e=e.replace(/xlink:?/,""))?null==n||!1===n?t.removeAttributeNS("http://www.w3.org/1999/xlink",e.toLowerCase()):t.setAttributeNS("http://www.w3.org/1999/xlink",e.toLowerCase(),n):null==n||!1===n&&!/^ar/.test(e)?t.removeAttribute(e):t.setAttribute(e,n))}function S(t){this.l[t.type+!1](r.event?r.event(t):t)}function C(t){this.l[t.type+!0](r.event?r.event(t):t)}function M(t,e,n){var r,o;for(r=0;r<t.__k.length;r++)(o=t.__k[r])&&(o.__=t,o.__e&&("function"==typeof o.type&&o.__k.length>1&&M(o,e,n),e=L(n,o,o,t.__k,null,o.__e,e),"function"==typeof t.type&&(t.__d=e)))}function T(t,e,n,o,i,a,u,l,c){var _,s,h,p,d,v,m,b,w,k,P,L=e.type;if(void 0!==e.constructor)return null;null!=n.__h&&(c=n.__h,l=e.__e=n.__e,e.__h=null,a=[l]),(_=r.__b)&&_(e);try{t:if("function"==typeof L){if(b=e.props,w=(_=L.contextType)&&o[_.__c],k=_?w?w.props.value:_.__:o,n.__c?m=(s=e.__c=n.__c).__=s.__E:("prototype"in L&&L.prototype.render?e.__c=s=new L(b,k):(e.__c=s=new g(b,k),s.constructor=L,s.render=Y),w&&w.sub(s),s.props=b,s.state||(s.state={}),s.context=k,s.__n=o,h=s.__d=!0,s.__h=[]),null==s.__s&&(s.__s=s.state),null!=L.getDerivedStateFromProps&&(s.__s==s.state&&(s.__s=f({},s.__s)),f(s.__s,L.getDerivedStateFromProps(b,s.__s))),p=s.props,d=s.state,h)null==L.getDerivedStateFromProps&&null!=s.componentWillMount&&s.componentWillMount(),null!=s.componentDidMount&&s.__h.push(s.componentDidMount);else{if(null==L.getDerivedStateFromProps&&b!==p&&null!=s.componentWillReceiveProps&&s.componentWillReceiveProps(b,k),!s.__e&&null!=s.shouldComponentUpdate&&!1===s.shouldComponentUpdate(b,s.__s,k)||e.__v===n.__v){s.props=b,s.state=s.__s,e.__v!==n.__v&&(s.__d=!1),s.__v=e,e.__e=n.__e,e.__k=n.__k,s.__h.length&&u.push(s),M(e,l,t);break t}null!=s.componentWillUpdate&&s.componentWillUpdate(b,s.__s,k),null!=s.componentDidUpdate&&s.__h.push((function(){s.componentDidUpdate(p,d,v)}))}s.context=k,s.props=b,s.state=s.__s,(_=r.__r)&&_(e),s.__d=!1,s.__v=e,s.__P=t,_=s.render(s.props,s.state,s.context),s.state=s.__s,null!=s.getChildContext&&(o=f(f({},o),s.getChildContext())),h||null==s.getSnapshotBeforeUpdate||(v=s.getSnapshotBeforeUpdate(p,d)),P=null!=_&&_.type==y&&null==_.key?_.props.children:_,x(t,Array.isArray(P)?P:[P],e,n,o,i,a,u,l,c),s.base=e.__e,e.__h=null,s.__h.length&&u.push(s),m&&(s.__E=s.__=null),s.__e=!1}else null==a&&e.__v===n.__v?(e.__k=n.__k,e.__e=n.__e):e.__e=H(n.__e,e,n,o,i,a,u,c);(_=r.diffed)&&_(e)}catch(t){e.__v=null,(c||null!=a)&&(e.__e=l,e.__h=!!c,a[a.indexOf(l)]=null),r.__e(t,e,n)}return e.__e}function j(t,e){r.__c&&r.__c(e,t),t.some((function(e){try{t=e.__h,e.__h=[],t.some((function(t){t.call(e)}))}catch(t){r.__e(t,e.__v)}}))}function H(t,e,n,r,o,i,a,u){var l,s,f,h,p,d=n.props,v=e.props;if(o="svg"===e.type||o,null!=i)for(l=0;l<i.length;l++)if(null!=(s=i[l])&&((null===e.type?3===s.nodeType:s.localName===e.type)||t==s)){t=s,i[l]=null;break}if(null==t){if(null===e.type)return document.createTextNode(v);t=o?document.createElementNS("http://www.w3.org/2000/svg",e.type):document.createElement(e.type,v.is&&{is:v.is}),i=null,u=!1}if(null===e.type)d===v||u&&t.data===v||(t.data=v);else{if(null!=i&&(i=_.slice.call(t.childNodes)),f=(d=n.props||c).dangerouslySetInnerHTML,h=v.dangerouslySetInnerHTML,!u){if(null!=i)for(d={},p=0;p<t.attributes.length;p++)d[t.attributes[p].name]=t.attributes[p].value;(h||f)&&(h&&(f&&h.__html==f.__html||h.__html===t.innerHTML)||(t.innerHTML=h&&h.__html||""))}(function(t,e,n,r,o){var i;for(i in n)"children"===i||"key"===i||i in e||O(t,i,null,n[i],r);for(i in e)o&&"function"!=typeof e[i]||"children"===i||"key"===i||"value"===i||"checked"===i||n[i]===e[i]||O(t,i,e[i],n[i],r)})(t,v,d,o,u),h?e.__k=[]:(l=e.props.children,x(t,Array.isArray(l)?l:[l],e,n,r,"foreignObject"!==e.type&&o,i,a,c,u)),u||("value"in v&&void 0!==(l=v.value)&&(l!==t.value||"progress"===e.type&&!l)&&O(t,"value",l,d.value,!1),"checked"in v&&void 0!==(l=v.checked)&&l!==t.checked&&O(t,"checked",l,d.checked,!1))}return t}function A(t,e,n){try{"function"==typeof t?t(e):t.current=e}catch(t){r.__e(t,n)}}function N(t,e,n){var o,i,a;if(r.unmount&&r.unmount(t),(o=t.ref)&&(o.current&&o.current!==t.__e||A(o,null,e)),n||"function"==typeof t.type||(n=null!=(i=t.__e)),t.__e=t.__d=void 0,null!=(o=t.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(t){r.__e(t,e)}o.base=o.__P=null}if(o=t.__k)for(a=0;a<o.length;a++)o[a]&&N(o[a],e,n);null!=i&&h(i)}function Y(t,e,n){return this.constructor(t,n)}function D(t,e,n){var o,i,a;r.__&&r.__(t,e),i=(o=n===u)?null:n&&n.__k||e.__k,t=p(y,null,[t]),a=[],T(e,(o?e:n||e).__k=t,i||c,c,void 0!==e.ownerSVGElement,n&&!o?[n]:i?null:e.childNodes.length?_.slice.call(e.childNodes):null,a,n||c,o),j(a,t)}function F(t,e){D(t,e,u)}function I(t,e,n){var r,o,i,a=arguments,u=f({},t.props);for(i in e)"key"==i?r=e[i]:"ref"==i?o=e[i]:u[i]=e[i];if(arguments.length>3)for(n=[n],i=3;i<arguments.length;i++)n.push(a[i]);return null!=n&&(u.children=n),d(t.type,u,r||t.key,o||t.ref,null)}function U(t,e){var n={__c:e="__cC"+l++,__:t,Consumer:function(t,e){return t.children(e)},Provider:function(t,n,r){return this.getChildContext||(n=[],(r={})[e]=this,this.getChildContext=function(){return r},this.shouldComponentUpdate=function(t){this.props.value!==t.value&&n.some(w)},this.sub=function(t){n.push(t);var e=t.componentWillUnmount;t.componentWillUnmount=function(){n.splice(n.indexOf(t),1),e&&e.call(t)}}),t.children}};return n.Provider.__=n.Consumer.contextType=n}r={__e:function(t,e){for(var n,r,o,i=e.__h;e=e.__;)if((n=e.__c)&&!n.__)try{if((r=n.constructor)&&null!=r.getDerivedStateFromError&&(n.setState(r.getDerivedStateFromError(t)),o=n.__d),null!=n.componentDidCatch&&(n.componentDidCatch(t),o=n.__d),o)return e.__h=i,n.__E=n}catch(e){t=e}throw t}},g.prototype.setState=function(t,e){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=f({},this.state),"function"==typeof t&&(t=t(f({},n),this.props)),t&&f(n,t),null!=t&&this.__v&&(e&&this.__h.push(e),w(this))},g.prototype.forceUpdate=function(t){this.__v&&(this.__e=!0,t&&this.__h.push(t),w(this))},g.prototype.render=y,o=[],i="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,k.__r=0,u=c,l=0},7318:(t,e,n)=>{"use strict";n.d(e,{eJ:()=>p,_Y:()=>d,d4:()=>v,bt:()=>y,sO:()=>g,aP:()=>m,Ye:()=>b,I4:()=>w,qp:()=>k,Qb:()=>x});var r,o,i,a=n(9306),u=0,l=[],c=a.YM.__r,_=a.YM.diffed,s=a.YM.__c,f=a.YM.unmount;function h(t,e){a.YM.__h&&a.YM.__h(o,t,u||e),u=0;var n=o.__H||(o.__H={__:[],__h:[]});return t>=n.__.length&&n.__.push({}),n.__[t]}function p(t){return u=1,d(C,t)}function d(t,e,n){var i=h(r++,2);return i.t=t,i.__c||(i.__=[n?n(e):C(void 0,e),function(t){var e=i.t(i.__[0],t);i.__[0]!==e&&(i.__=[e,i.__[1]],i.__c.setState({}))}],i.__c=o),i.__}function v(t,e){var n=h(r++,3);!a.YM.__s&&S(n.__H,e)&&(n.__=t,n.__H=e,o.__H.__h.push(n))}function y(t,e){var n=h(r++,4);!a.YM.__s&&S(n.__H,e)&&(n.__=t,n.__H=e,o.__h.push(n))}function g(t){return u=5,b((function(){return{current:t}}),[])}function m(t,e,n){u=6,y((function(){"function"==typeof t?t(e()):t&&(t.current=e())}),null==n?n:n.concat(t))}function b(t,e){var n=h(r++,7);return S(n.__H,e)&&(n.__=t(),n.__H=e,n.__h=t),n.__}function w(t,e){return u=8,b((function(){return t}),e)}function k(t){var e=o.context[t.__c],n=h(r++,9);return n.__c=t,e?(null==n.__&&(n.__=!0,e.sub(o)),e.props.value):t.__}function x(t,e){a.YM.useDebugValue&&a.YM.useDebugValue(e?e(t):t)}function P(){l.some((function(t){if(t.__P)try{t.__H.__h.forEach(E),t.__H.__h.forEach(O),t.__H.__h=[]}catch(e){return t.__H.__h=[],a.YM.__e(e,t.__v),!0}})),l=[]}a.YM.__r=function(t){c&&c(t),r=0;var e=(o=t.__c).__H;e&&(e.__h.forEach(E),e.__h.forEach(O),e.__h=[])},a.YM.diffed=function(t){_&&_(t);var e=t.__c;e&&e.__H&&e.__H.__h.length&&(1!==l.push(e)&&i===a.YM.requestAnimationFrame||((i=a.YM.requestAnimationFrame)||function(t){var e,n=function(){clearTimeout(r),L&&cancelAnimationFrame(e),setTimeout(t)},r=setTimeout(n,100);L&&(e=requestAnimationFrame(n))})(P))},a.YM.__c=function(t,e){e.some((function(t){try{t.__h.forEach(E),t.__h=t.__h.filter((function(t){return!t.__||O(t)}))}catch(n){e.some((function(t){t.__h&&(t.__h=[])})),e=[],a.YM.__e(n,t.__v)}})),s&&s(t,e)},a.YM.unmount=function(t){f&&f(t);var e=t.__c;if(e&&e.__H)try{e.__H.__.forEach(E)}catch(t){a.YM.__e(t,e.__v)}};var L="function"==typeof requestAnimationFrame;function E(t){"function"==typeof t.u&&t.u()}function O(t){t.u=t.__()}function S(t,e){return!t||t.length!==e.length||e.some((function(e,n){return e!==t[n]}))}function C(t,e){return"function"==typeof e?e(t):e}},1061:t=>{var e=function(t){"use strict";var e,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag";function l(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{l({},"")}catch(t){l=function(t,e,n){return t[e]=n}}function c(t,e,n,r){var o=e&&e.prototype instanceof v?e:v,i=Object.create(o.prototype),a=new S(r||[]);return i._invoke=function(t,e,n){var r=s;return function(o,i){if(r===h)throw new Error("Generator is already running");if(r===p){if("throw"===o)throw i;return M()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var u=L(a,n);if(u){if(u===d)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===s)throw r=p,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=h;var l=_(t,e,n);if("normal"===l.type){if(r=n.done?p:f,l.arg===d)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r=p,n.method="throw",n.arg=l.arg)}}}(t,n,a),i}function _(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var s="suspendedStart",f="suspendedYield",h="executing",p="completed",d={};function v(){}function y(){}function g(){}var m={};m[i]=function(){return this};var b=Object.getPrototypeOf,w=b&&b(b(C([])));w&&w!==n&&r.call(w,i)&&(m=w);var k=g.prototype=v.prototype=Object.create(m);function x(t){["next","throw","return"].forEach((function(e){l(t,e,(function(t){return this._invoke(e,t)}))}))}function P(t,e){function n(o,i,a,u){var l=_(t[o],t,i);if("throw"!==l.type){var c=l.arg,s=c.value;return s&&"object"==typeof s&&r.call(s,"__await")?e.resolve(s.__await).then((function(t){n("next",t,a,u)}),(function(t){n("throw",t,a,u)})):e.resolve(s).then((function(t){c.value=t,a(c)}),(function(t){return n("throw",t,a,u)}))}u(l.arg)}var o;this._invoke=function(t,r){function i(){return new e((function(e,o){n(t,r,e,o)}))}return o=o?o.then(i,i):i()}}function L(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method))return d;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var o=_(r,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,d;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,d):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,d)}function E(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function S(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function C(t){if(t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}return{next:M}}function M(){return{value:e,done:!0}}return y.prototype=k.constructor=g,g.constructor=y,y.displayName=l(g,u,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,g):(t.__proto__=g,l(t,u,"GeneratorFunction")),t.prototype=Object.create(k),t},t.awrap=function(t){return{__await:t}},x(P.prototype),P.prototype[a]=function(){return this},t.AsyncIterator=P,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new P(c(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},x(k),l(k,u,"Generator"),k[i]=function(){return this},k.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=C,S.prototype={constructor:S,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return u.type="throw",u.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var l=r.call(a,"catchLoc"),c=r.call(a,"finallyLoc");if(l&&c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),O(n),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:C(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),d}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}}},r={};function o(t){if(r[t])return r[t].exports;var e=r[t]={exports:{}};return n[t](e,e.exports,o),e.exports}o.m=n,o.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return o.d(e,{a:e}),e},o.d=(t,e)=>{for(var n in e)o.o(e,n)&&!o.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},o.f={},o.e=t=>Promise.all(Object.keys(o.f).reduce(((e,n)=>(o.f[n](t,e),e)),[])),o.u=t=>t+".js",o.miniCssF=t=>(({179:"main",532:"styles"}[t]||t)+".css"),o.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t={},e="guitarino.github.io:",o.l=(n,r,i)=>{if(t[n])t[n].push(r);else{var a,u;if(void 0!==i)for(var l=document.getElementsByTagName("script"),c=0;c<l.length;c++){var _=l[c];if(_.getAttribute("src")==n||_.getAttribute("data-webpack")==e+i){a=_;break}}a||(u=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,o.nc&&a.setAttribute("nonce",o.nc),a.setAttribute("data-webpack",e+i),a.src=n),t[n]=[r];var s=(e,r)=>{a.onerror=a.onload=null,clearTimeout(f);var o=t[n];if(delete t[n],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((t=>t(r))),e)return e(r)},f=setTimeout(s.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=s.bind(null,a.onerror),a.onload=s.bind(null,a.onload),u&&document.head.appendChild(a)}},o.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.p="/",(()=>{var t={179:0},e=[[1246]];o.f.j=(e,n)=>{var r=o.o(t,e)?t[e]:void 0;if(0!==r)if(r)n.push(r[2]);else if(532!=e){var i=new Promise(((n,o)=>{r=t[e]=[n,o]}));n.push(r[2]=i);var a=o.p+o.u(e),u=new Error;o.l(a,(n=>{if(o.o(t,e)&&(0!==(r=t[e])&&(t[e]=void 0),r)){var i=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;u.message="Loading chunk "+e+" failed.\n("+i+": "+a+")",u.name="ChunkLoadError",u.type=i,u.request=a,r[1](u)}}),"chunk-"+e)}else t[e]=0};var n=()=>{};function r(){for(var n,r=0;r<e.length;r++){for(var i=e[r],a=!0,u=1;u<i.length;u++){var l=i[u];0!==t[l]&&(a=!1)}a&&(e.splice(r--,1),n=o(o.s=i[0]))}return 0===e.length&&(o.x(),o.x=()=>{}),n}o.x=()=>{o.x=()=>{},a=a.slice();for(var t=0;t<a.length;t++)i(a[t]);return(n=r)()};var i=r=>{for(var i,a,[l,c,_,s]=r,f=0,h=[];f<l.length;f++)a=l[f],o.o(t,a)&&t[a]&&h.push(t[a][0]),t[a]=0;for(i in c)o.o(c,i)&&(o.m[i]=c[i]);for(_&&_(o),u(r);h.length;)h.shift()();return s&&e.push.apply(e,s),n()},a=self.webpackChunkguitarino_github_io=self.webpackChunkguitarino_github_io||[],u=a.push.bind(a);a.push=i})(),o.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,